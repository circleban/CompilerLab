In line no 1, Inserting a with type INT_TYPE in symbol table.
Parsing finished!!
============= INTERMEDIATE CODE===============
  0: start              -1
  1: ld_int            100
  2: ld_int             50
  3: sub                -1
  4: ld_int              2
  5: ld_int              5
  6: mul                -1
  7: sub                -1
  8: store               0
  9: ld_var              0
 10: ld_int              5
 11: lt                 11
 12: if_start            9
 13: print_string        0
 14: else_start          9
 15: else_end            9
 16: print_int_value     0
 17: halt               -1
============= ASM CODE===============

;start -1
.686
.model flat, c
include E:\masm32\include\msvcrt.inc
includelib E:\masm32\lib\msvcrt.lib

.stack 100h
printf PROTO arg1:Ptr Byte, printlist:VARARG
scanf PROTO arg2:Ptr Byte, inputlist:VARARG

.data
output_integer_msg_format byte "%d", 0Ah, 0
output_string_msg_format byte "%s", 0Ah, 0
input_integer_format byte "%d",0

literal_0 byte "It is less than 5", 0
number sdword ?

.code

main proc
	push ebp
	mov ebp, esp
	sub ebp, 100
	mov ebx, ebp
	add ebx, 4

;ld_int 100
	mov eax, 100
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 50
	mov eax, 50
	mov dword ptr [ebx], eax
	add ebx, 4


;sub -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	sub edx, eax
	mov dword ptr [ebx], edx
	add ebx, 4
	mov eax, edx


;ld_int 2
	mov eax, 2
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 5
	mov eax, 5
	mov dword ptr [ebx], eax
	add ebx, 4


;mul -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov ecx, [ebx]
	mul ecx
	mov dword ptr [ebx], eax
	add ebx, 4


;sub -1
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	sub edx, eax
	mov dword ptr [ebx], edx
	add ebx, 4
	mov eax, edx


;store 0
	mov eax, [ebx-4]
	mov dword ptr [ebp-0], eax

;ld_var 0
	mov eax, [ebp-0]
	mov dword ptr [ebx], eax
	add ebx, 4


;ld_int 5
	mov eax, 5
	mov dword ptr [ebx], eax
	add ebx, 4


;lt 11
	sub ebx, 4
	mov eax, [ebx]
	sub ebx, 4
	mov edx, [ebx]
	cmp edx, eax
	jl LS11
	mov dword ptr [ebx], 0
	jmp LE11
	LS11: mov dword ptr [ebx], 1
	LE11: add ebx, 4



;if_start 9
	mov eax, [ebx-4]
	cmp eax, 0
	jle ELSE_START_LABEL_9


;print_string 0
	push eax
	push ebx
	push ecx
	push edx
	push [ebp-0]
	push [ebp+4]
	push [ebp+8]
	push [ebp+12]
	push [ebp+16]
	push [ebp+20]
	push [ebp+24]
	push ebp
	INVOKE printf, ADDR output_string_msg_format, ADDR literal_0
	pop ebp
	pop [ebp+24]
	pop [ebp+20]
	pop [ebp+16]
	pop [ebp+12]
	pop [ebp+8]
	pop [ebp+4]
	pop [ebp-0]
	pop edx
	pop ecx
	pop ebx
	pop eax

;else_start 9
	jmp ELSE_END_LABEL_9
ELSE_START_LABEL_9:


;else_end 9
ELSE_END_LABEL_9:


;print_int_value 0
	push eax
	push ebx
	push ecx
	push edx
	push [ebp-0]
	push [ebp+4]
	push [ebp+8]
	push [ebp+12]
	push [ebp+16]
	push [ebp+20]
	push [ebp+24]
	push ebp
	mov eax, [ebp-0]
	INVOKE printf, ADDR output_integer_msg_format, eax
	pop ebp
	pop [ebp+24]
	pop [ebp+20]
	pop [ebp+16]
	pop [ebp+12]
	pop [ebp+8]
	pop [ebp+4]
	pop [ebp-0]
	pop edx
	pop ecx
	pop ebx
	pop eax

;halt -1
	add ebp, 100
	mov esp, ebp
	pop ebp
	ret
main endp
end
